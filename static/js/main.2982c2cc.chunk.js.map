{"version":3,"sources":["components/layout.js","components/search.js","components/gif-Item.js","components/gif-Grid.js","Api.js","components/search-Container.js","App.js","serviceWorker.js","index.js"],"names":["Layout","_this$props","this","props","children","title","react_default","a","createElement","Component","Search","className","onSubmit","handleSubmit","ref","setRef","type","placeholder","name","onChange","handleChange","value","GifItem","src","images","original","url","alt","width","height","GifGrid","gifList","map","item","components_gif_Item","Object","assign","key","id","src_Api","q","console","log","fetch","concat","query","json","data","SearchContainer","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","event","preventDefault","input","setInputRef","element","target","setState","replace","getData","state","bind","assertThisInitialized","API","searchGif","components_search","components_gif_Grid","App","layout","components_search_Container","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2982c2cc.chunk.js","sourcesContent":["import React, {Component} from 'react'\r\n\r\nclass Layout extends Component {\r\n\r\n  render() {\r\n\r\n    const { children, title } = this.props\r\n\r\n    return (\r\n      <div>\r\n        <p>{ title }</p>\r\n        { children }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Layout","import React from 'react'\r\nimport './search.css'\r\n\r\nconst Search = (props) => (\r\n\r\n  <form \r\n    className='Search'\r\n    onSubmit={props.handleSubmit}>\r\n    <input \r\n      ref={props.setRef}\r\n      type='text'\r\n      placeholder='Busca tu gif favorito'\r\n      className='Search-input'\r\n      name='search'\r\n      onChange={props.handleChange}\r\n      value={props.value}\r\n    />\r\n  </form>\r\n)\r\n\r\nexport default Search","import React , { Component } from 'react'\r\nimport './gif-Item.css'\r\n\r\nclass GifItem extends Component {\r\n  \r\n\trender() {\r\n\r\n\t\treturn (\r\n\t\t\t<div className='gif'>\r\n\t\t\t\t<img src={this.props.images.original.url} alt=\"\" width={260} height={160}/>\r\n\t\t\t\t<h2>{this.props.title}</h2>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default GifItem","import React, { Component } from 'react'\r\nimport GifItem from './gif-Item';\r\nimport './gif-Grid.css'\r\n\r\nclass GifGrid extends Component {\r\n\r\n  render() {\r\n\r\n    const { gifList } = this.props\r\n\r\n    return (\r\n      <div className=\"grid\">\r\n        { \r\n          gifList.map ( item => {\r\n            return <GifItem {...item} key={item.id}/>\r\n          })\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default GifGrid\r\n","const URL_API = 'https://api.giphy.com/v1'\r\n\r\nclass Api {\r\n  \r\n  async searchGif(q) {\r\n    console.log('searchGif : ', q)\r\n    const query = await fetch(`${URL_API}/gifs/search?api_key=x7dLiLrADHYCP7uVDwnNcLUEBXiIHUOZ&q=${q}&limit=25&offset=0&rating=G&lang=en`) \r\n    const { data } = await query.json()\r\n    return data\r\n  }\r\n\r\n}\r\n\r\nexport default new Api()","import React, { Component } from 'react'\r\nimport './search-Container.css'\r\nimport Search from '../components/search'\r\nimport GifGrid from '../components/gif-Grid'\r\nimport API from '../Api'\r\n\r\n\r\nclass SearchContainer extends Component {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      value: '',\r\n      gifList: [],\r\n    }\r\n\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.setInputRef = this.setInputRef.bind(this);\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n\r\n  async getData(query){\r\n\r\n    \r\n    console.log('getData (this.state.value): ', this.state.value)\r\n\r\n    const data = await API.searchGif(query)\r\n\r\n    console.log('data: ', data)\r\n    \r\n    this.setState({\r\n      gifList: data,\r\n    })\r\n    \r\n  }\r\n\r\n  handleSubmit = event => {\r\n    event.preventDefault()\r\n    console.log(this.input.value,'submit')\r\n  }\r\n  \r\n  setInputRef = element => {\r\n    this.input = element\r\n  }\r\n\r\n  handleChange = event => {\r\n\r\n    console.log('event.target.value: ', event.target.value)\r\n\r\n    this.setState({\r\n      value: event.target.value.replace(' ','-')\r\n    })\r\n\r\n    this.getData(event.target.value)\r\n\r\n  }\r\n\r\n  render() {\r\n    return(   \r\n      <div className=\"container\">\r\n        <Search\r\n          setRef={this.setInputRef}\r\n          handleSubmit={this.handleSubmit}\r\n          handleChange={this.handleChange}\r\n          value={this.state.value}\r\n        />\r\n        <GifGrid gifList = { this.state.gifList } />\r\n      </div>\r\n      )\r\n  }\r\n}\r\n\r\nexport default  SearchContainer","import React, { Component } from 'react';\nimport Layout from './components/layout'\nimport SearchContainer from './components/search-Container.js';\n\nclass App extends Component {\n\n  render() {\n    return (\n      <Layout title=\"\">\n        <SearchContainer/>\n      </Layout>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}