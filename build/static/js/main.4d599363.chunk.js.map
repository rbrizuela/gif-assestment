{"version":3,"sources":["Api.js","components/layout.js","components/gif-Item.js","components/gif-Grid.js","components/search.js","components/search-Container.js","App.js","serviceWorker.js","index.js"],"names":["src_Api","q","fetch","concat","query","json","data","Layout","_this$props","this","props","children","title","react_default","a","createElement","Component","GifItem","className","src","images","original","url","alt","width","height","GifGrid","gifList","map","item","components_gif_Item","Object","assign","key","id","Search","onSubmit","handleSubmit","ref","setRef","type","placeholder","name","onChange","handleChange","value","SearchContainer","state","event","preventDefault","console","log","_this","input","setInputRef","element","handleInputChange","setState","target","replace","components_search","App","API","searchGif","layout","components_search_Container","components_gif_Grid","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+UAYeA,EAAA,8IARGC,6FACMC,MAAK,GAAAC,OALb,2BAKa,4DAAAA,OAAsEF,EAAtE,sDAAnBG,kBACiBA,EAAMC,8BAArBC,2BACDA,2GCUIC,mLAbJ,IAAAC,EAEqBC,KAAKC,MAAzBC,EAFDH,EAECG,SAAUC,EAFXJ,EAEWI,MAElB,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SAAKH,GACHD,UATWK,aCcNC,0LATb,OACCJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACdL,EAAAC,EAAAC,cAAA,OAAKI,IAAKV,KAAKC,MAAMU,OAAOC,SAASC,IAAKC,IAAI,GAAGC,MAAO,IAAKC,OAAQ,MACrEZ,EAAAC,EAAAC,cAAA,UAAKN,KAAKC,MAAME,eAPEI,cCmBPU,0LAhBJ,IAECC,EAAYlB,KAAKC,MAAjBiB,QAER,OACEd,EAAAC,EAAAC,cAAA,OAAKG,UAAU,QAEXS,EAAQC,IAAM,SAAAC,GACZ,OAAOhB,EAAAC,EAAAC,cAACe,EAADC,OAAAC,OAAA,GAAaH,EAAb,CAAmBI,IAAKJ,EAAKK,gBAV1BlB,cCgBPmB,SAjBA,SAACzB,GAAD,OAEbG,EAAAC,EAAAC,cAAA,QACEG,UAAU,SACVkB,SAAU1B,EAAM2B,cAChBxB,EAAAC,EAAAC,cAAA,SACEuB,IAAK5B,EAAM6B,OACXC,KAAK,OACLC,YAAY,wBACZvB,UAAU,eACVwB,KAAK,SACLC,SAAUjC,EAAMkC,aAChBC,MAAOnC,EAAMmC,WCwBHC,oNAjCdC,MAAQ,CACNF,MAAO,MAGTR,aAAe,SAAAW,GACbA,EAAMC,iBACNC,QAAQC,IAAIC,EAAKC,MAAMR,MAAM,aAG/BS,YAAc,SAAAC,GACZH,EAAKC,MAAQE,KAGfC,kBAAoB,SAAAR,GAClBI,EAAKK,SAAS,CACZZ,MAAOG,EAAMU,OAAOb,MAAMc,QAAQ,IAAI,gFAKxC,OACE9C,EAAAC,EAAAC,cAAA,OAAKG,UAAU,aACbL,EAAAC,EAAAC,cAAC6C,EAAD,CACErB,OAAQ9B,KAAK6C,YACbjB,aAAc5B,KAAK4B,aACnBO,aAAcnC,KAAK+C,kBACnBX,MAAOpC,KAAKsC,MAAMF,gBA5BE7B,cC8Bf6C,6MAzBbd,MAAQ,CACNpB,QAAS,qNAIUmC,EAAIC,UAAU,WAA3BzD,SAEN4C,QAAQC,IAAI7C,GAEZG,KAAKgD,SAAS,CACZ9B,QAASrB,uIAMX,OACGO,EAAAC,EAAAC,cAACiD,EAAD,CAAQpD,MAAM,kBACbC,EAAAC,EAAAC,cAACkD,EAAD,MACApD,EAAAC,EAAAC,cAACmD,EAAD,CAASvC,QAAYlB,KAAKsC,MAAMpB,kBArBtBX,aCKEmD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5D,EAAAC,EAAAC,cAAC2D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.4d599363.chunk.js","sourcesContent":["const URL_API = 'https://api.giphy.com/v1'\r\n\r\nclass Api {\r\n  \r\n  async searchGif(q) {\r\n    const query = await fetch(`${URL_API}/gifs/search?api_key=x7dLiLrADHYCP7uVDwnNcLUEBXiIHUOZ&q=${q}&limit=25&offset=0&rating=G&lang=en`) \r\n    const { data } = await query.json()\r\n    return data\r\n  }\r\n\r\n}\r\n\r\nexport default new Api()","import React, {Component} from 'react'\r\n\r\nclass Layout extends Component {\r\n\r\n  render() {\r\n\r\n    const { children, title } = this.props\r\n\r\n    return (\r\n      <div>\r\n        <p>{ title }</p>\r\n        { children }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Layout","import React , { Component } from 'react'\r\nimport './gif-Item.css'\r\n\r\nclass GifItem extends Component {\r\n  \r\n\trender() {\r\n\r\n\t\treturn (\r\n\t\t\t<div className='gif'>\r\n\t\t\t\t<img src={this.props.images.original.url} alt=\"\" width={260} height={160}/>\r\n\t\t\t\t<h2>{this.props.title}</h2>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default GifItem","import React, { Component } from 'react'\r\nimport GifItem from './gif-Item';\r\nimport './gif-Grid.css'\r\n\r\nclass GifGrid extends Component {\r\n\r\n  render() {\r\n\r\n    const { gifList } = this.props\r\n\r\n    return (\r\n      <div className=\"grid\">\r\n        { \r\n          gifList.map ( item => {\r\n            return <GifItem {...item} key={item.id}/>\r\n          })\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default GifGrid\r\n","import React from 'react'\r\nimport './search.css'\r\n\r\nconst Search = (props) => (\r\n\r\n  <form \r\n    className='Search'\r\n    onSubmit={props.handleSubmit}>\r\n    <input \r\n      ref={props.setRef}\r\n      type='text'\r\n      placeholder='Busca tu gif favorito'\r\n      className='Search-input'\r\n      name='search'\r\n      onChange={props.handleChange}\r\n      value={props.value}\r\n    />\r\n  </form>\r\n)\r\n\r\nexport default Search","import React, { Component } from 'react'\r\nimport Search from './search';\r\nimport './search-Container.css'\r\n\r\nclass SearchContainer extends Component {\r\n  \r\n  state = {\r\n    value: '',\r\n  }\r\n\r\n  handleSubmit = event => {\r\n    event.preventDefault()\r\n    console.log(this.input.value,'submit')\r\n  }\r\n  \r\n  setInputRef = element => {\r\n    this.input = element\r\n  }\r\n\r\n  handleInputChange = event => {\r\n    this.setState({\r\n      value: event.target.value.replace(' ','-')\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return(   \r\n      <div className=\"container\">\r\n        <Search\r\n          setRef={this.setInputRef}\r\n          handleSubmit={this.handleSubmit}\r\n          handleChange={this.handleInputChange}\r\n          value={this.state.value}\r\n        />\r\n      </div>\r\n      )\r\n  }\r\n}\r\n\r\nexport default  SearchContainer","import React, { Component } from 'react';\nimport API from './Api.js'\nimport Layout from './components/layout'\nimport GifGrid from './components/gif-Grid'\nimport SearchContainer from './components/search-Container.js';\n\n\nclass App extends Component {\n\n  state = {\n    gifList: [],\n  }\n\n  async componentDidMount(){\n    const data = await API.searchGif('')\n\n    console.log(data)\n    \n    this.setState({\n      gifList: data,\n    })\n\n  }\n\n  render() {\n    return (\n       <Layout title=\"gif assestment\">\n        <SearchContainer/>\n        <GifGrid gifList = { this.state.gifList } />\n      </Layout>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}